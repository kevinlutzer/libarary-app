// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Kevin Lutzer",
            "email": "kevinlutzer@proton.me"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/book": {
            "get": {
                "description": "Loads a list of books based on the specified filters in the query string",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "book"
                ],
                "summary": "Get Books",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "a list of ids of books",
                        "name": "ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "the author of the books",
                        "name": "author",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "science",
                            "history",
                            "philosophy",
                            "art",
                            "cooking",
                            "fantasy",
                            "tragedy"
                        ],
                        "type": "string",
                        "description": "the genre of the books",
                        "name": "genre",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "the start of the range of published dates must be specified in the form of 2006-01-02",
                        "name": "publishedStart",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "the end of the range of published dates must be specified in the form of 2006-01-02",
                        "name": "publishedEnd",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/shared.BookGetResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Creates a book based on the specified data in the request body",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "book"
                ],
                "summary": "Create a Book",
                "parameters": [
                    {
                        "description": "form data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/shared.BookCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/shared.BookCreateResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Updates a book with the specified id in the request body. Fields can be additionally updated based on if they appear in the field mask.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "book"
                ],
                "summary": "Update a Book",
                "parameters": [
                    {
                        "description": "form data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/shared.BookUpdateRequest"
                        }
                    }
                ],
                "responses": {}
            },
            "delete": {
                "description": "Deletes a book with the specified id, a deleted book will not be able to be updated, deleted or surfaced in GET /v1/book and GET /v1/collection APIs.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "book"
                ],
                "summary": "Delete a Book",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the id of the book to delete",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/collection": {
            "get": {
                "description": "Loads all collections that are stored",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collection"
                ],
                "summary": "Get Collections",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "include the books nested as each collection, this option will increase the time the API takes to execute",
                        "name": "includebooks",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/shared.CollectionGetResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Creates a collection based on the specified data in the request body",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collection"
                ],
                "summary": "Create a Collection",
                "parameters": [
                    {
                        "description": "form data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/shared.CollectionCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/shared.CollectionCreateResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Updates a collection with the specified id in the request body. Fields can be additionally updated based on if they appear in the field mask.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collection"
                ],
                "summary": "Update a Collection",
                "parameters": [
                    {
                        "description": "form data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/shared.CollectionUpdateRequest"
                        }
                    }
                ],
                "responses": {}
            },
            "delete": {
                "description": "Deletes a collection with the specified id, a collection will not be able to be updated, deleted or surfaced in GET /v1/collection API.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collection"
                ],
                "summary": "Delete a Collection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the id of the collection to delete",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        }
    },
    "definitions": {
        "shared.ApiBook": {
            "type": "object",
            "required": [
                "author",
                "description",
                "edition",
                "genre",
                "id",
                "publishedAt",
                "title"
            ],
            "properties": {
                "author": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "edition": {
                    "type": "integer"
                },
                "genre": {
                    "$ref": "#/definitions/shared.Genre"
                },
                "id": {
                    "type": "string"
                },
                "publishedAt": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "shared.ApiCollection": {
            "type": "object",
            "required": [
                "id",
                "title"
            ],
            "properties": {
                "books": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/shared.ApiBook"
                    }
                },
                "id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "shared.ApiResponseType": {
            "type": "string",
            "enum": [
                "success",
                "err"
            ],
            "x-enum-varnames": [
                "Success",
                "Error"
            ]
        },
        "shared.BookCreateRequest": {
            "type": "object",
            "required": [
                "title"
            ],
            "properties": {
                "data": {
                    "description": "optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/shared.BookData"
                        }
                    ]
                },
                "id": {
                    "description": "optional",
                    "type": "string"
                },
                "title": {
                    "description": "required",
                    "type": "string"
                }
            }
        },
        "shared.BookCreateResponse": {
            "type": "object",
            "properties": {
                "result": {
                    "$ref": "#/definitions/shared.BookCreateResponseData"
                },
                "type": {
                    "$ref": "#/definitions/shared.ApiResponseType"
                }
            }
        },
        "shared.BookCreateResponseData": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "shared.BookData": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "edition": {
                    "type": "integer"
                },
                "genre": {
                    "type": "string"
                },
                "publishedAt": {
                    "type": "string"
                }
            }
        },
        "shared.BookGetResponse": {
            "type": "object",
            "properties": {
                "result": {
                    "$ref": "#/definitions/shared.BookGetResponseData"
                },
                "type": {
                    "$ref": "#/definitions/shared.ApiResponseType"
                }
            }
        },
        "shared.BookGetResponseData": {
            "type": "object",
            "required": [
                "books"
            ],
            "properties": {
                "books": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/shared.ApiBook"
                    }
                }
            }
        },
        "shared.BookUpdateRequest": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/shared.BookData"
                },
                "fieldMask": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "shared.CollectionCreateRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "bookIDs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "shared.CollectionCreateResponse": {
            "type": "object",
            "properties": {
                "result": {
                    "$ref": "#/definitions/shared.CollectionCreateResponseData"
                },
                "type": {
                    "$ref": "#/definitions/shared.ApiResponseType"
                }
            }
        },
        "shared.CollectionCreateResponseData": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "shared.CollectionData": {
            "type": "object",
            "properties": {
                "bookIDs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "shared.CollectionGetResponse": {
            "type": "object",
            "properties": {
                "result": {
                    "$ref": "#/definitions/shared.CollectionGetResponseData"
                },
                "type": {
                    "$ref": "#/definitions/shared.ApiResponseType"
                }
            }
        },
        "shared.CollectionGetResponseData": {
            "type": "object",
            "required": [
                "collections"
            ],
            "properties": {
                "collections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/shared.ApiCollection"
                    }
                }
            }
        },
        "shared.CollectionUpdateRequest": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/shared.CollectionData"
                },
                "fieldMask": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "shared.Genre": {
            "type": "string",
            "enum": [
                "science",
                "history",
                "philosophy",
                "art",
                "cooking",
                "fantasy",
                "tragedy"
            ],
            "x-enum-varnames": [
                "Science",
                "History",
                "Philosophy",
                "Art",
                "Cooking",
                "Fantasy",
                "Tragedy"
            ]
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Library App API",
	Description:      "This is a sample server celler server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
